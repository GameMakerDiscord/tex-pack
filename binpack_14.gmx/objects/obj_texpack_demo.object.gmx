<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tpage = tex_page_create(2048, 1024);
var f = file_find_first("items/*.png", 0);
for (; f != ""; f = file_find_next()) {
    // filename_change_ext(f, "") returns C NULL!
    var sp = tex_page_add(tpage, "items/" + f, 1, 0, 0);
    var images = sp[tex_sprite_images];
    for (var i = 0; i &lt; sp[tex_sprite_count]; i++) {
        var img = images[i];
        if (img != undefined) {
            img[@tex_entry_orig_x] = img[tex_entry_width] / 2;
            img[@tex_entry_orig_y] = img[tex_entry_height] / 2;
            img[@tex_entry_custom] = string_digits(f);
            img[@tex_entry_custom + 1] = sp;
            img[@tex_entry_custom + 2] = i;
        } else {
            show_debug_message("Can't fit " + f + " image " + string(i));
        }
    }
}
file_find_next();
tex_page_finalize(tpage);
vis_queue = ds_queue_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tex_page_destroy(tpage);
ds_queue_destroy(vis_queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tex_page_destroy(tpage);
ds_queue_destroy(vis_queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var px = spr_texpack_demo;
var tps = tpage[tex_page_sprite];
draw_sprite_ext(tps,0, 0,0, 1,1, 0, c_white,0.3);
var tpw = sprite_get_width(tps);
var tph = sprite_get_height(tps);
draw_sprite_stretched(px,0, tpw,0, 1, tph);
draw_sprite_stretched(px,0, 0,tph, tpw + 1, 1);

//
draw_set_font(fnt_texpack_demo);
ds_queue_clear(vis_queue);
ds_queue_enqueue(vis_queue, tpage[tex_page_root]);
var spr = undefined, img = -1;
while (!ds_queue_empty(vis_queue)) {
	var e = ds_queue_dequeue(vis_queue);
	var ex = e[tex_entry_x];
	var ey = e[tex_entry_y];
	var ew = e[tex_entry_width];
	var eh = e[tex_entry_height];
	//
	if (ew &gt; 1 &amp;&amp; eh &gt; 1) {
		draw_sprite_stretched(px,0, ex, ey, ew - 1, 1);
		draw_sprite_stretched(px,0, ex, ey + 1, 1, eh - 2);
	}
	//
	//draw_rectangle(ex + 1, ey + 1, ex + ew - 1, ey + eh - 1, true);
	var e_has_custom = array_length_1d(e) &gt; tex_entry_custom + 1;
	if (e_has_custom) {
		draw_text_ext(ex + 3, ey + 3, e[tex_entry_custom], -1, ew - 6);
	}
	var ea = e[tex_entry_node_a];
	if (ea != undefined) ds_queue_enqueue(vis_queue, ea);
	var eb = e[tex_entry_node_b];
	if (eb != undefined) ds_queue_enqueue(vis_queue, eb);
	if (point_in_rectangle(mouse_x, mouse_y, ex, ey, ex + ew - 1, ey + eh - 1)
	&amp;&amp; e_has_custom) {
		spr = e[tex_entry_custom + 1];
		img = e[tex_entry_custom + 2];
	}
}

//
if (spr != undefined) {
	tex_sprite_draw_ext(spr, img, mouse_x, mouse_y, 2, 2, current_time/3, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
